
"----------------------------------------------------
"basic setting
"----------------------------------------------------
sy on
set t_Co=256
colorscheme molokai_cassy
set nu
set encoding=utf-8
set fileencoding=utf-8
set cursorline
" コマンドラインに使われる画面上の行数
"set cmdheight=2
" エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
"set laststatus=2
" ウインドウのタイトルバーにファイルのパス情報等を表示する
set title

"#tab
set laststatus=2
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

"#search
set hlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan

"#indent
set smartindent

"#visualize
set list
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<

"#cursor
set whichwrap=b,s,h,l,<,>,[,]
set backspace=indent,eol,start
" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk"

"#permute
set wildmode=list:longest

"#mouse
if has('mouse')
  set mouse=a
  if has('mouse_sgr')
    set ttymouse=sgr
  elseif v:version > 703 || v:version is 703 && has('patch632')
    set ttymouse=sgr
  else
    set ttymouse=xterm2
  endif
endif

"#paste
if &term =~ "xterm"
  let &t_SI .= "\e[?2004h"
  let &t_EI .= "\e[?2004l"
  let &pastetoggle = "\e[201~"

  function XTermPasteBegin(ret)
    set paste
    return a:ret
  endfunction

  inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif

"#command
set wildmenu " コマンドモードの補完
set history=5000 " 保存するコマンド履歴の数""
"----------------------------------------------------
"my command
"----------------------------------------------------
inoremap <C-h>  <C-o><Left>
"inoremap <C-l>  <C-o><Right>
inoremap <C-l>  <C-o>a
inoremap <C-j>  <C-o><Down>
inoremap <C-k>  <C-o><UP>
inoremap <C-x>x <C-o>x
inoremap <C-x>w <C-o>dw
inoremap <C-u> <C-o>u
inoremap <C-r> <C-o><C-r>
"inoremap <C-y> <C-o>yy
"inoremap <C-d> <C-o>dd
"inoremap <C-p> <C-o>p
inoremap <C-e> <End>
inoremap <C-a> <Home>

inoremap { {}<Left>
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap < <><Left>
inoremap ' ''<Left>
inoremap " ""<Left>
inoremap <expr> } ClosePair('}')
inoremap <expr> ) ClosePair(')')
inoremap <expr> ] ClosePair(']')
inoremap <expr> > ClosePair('>')
function ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
  else
    return a:char
  endif
endf

nnoremap ; :
nnoremap <C-i> :nohlsearch<CR><Esc>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h
nnoremap <Return> o<Esc>
nnoremap <C-e> <End>
nnoremap <C-a> <Home>
nmap ,ee :e ++enc=euc-jp<CR>
nmap ,uu :e ++enc=utf-7<CR>

vnoremap <C-x>i <Esc>
vnoremap <C-e> <End>
vnoremap <C-a> <Home>

ab plog_- error_log(var_export(, true));<left><left><left><left><left><left><left><left><left>
ab jlog_- console.log(
ab rlog_- logger.debug(

"----------------------------------------------------
"bundle setting
"https://github.com/gmarik/vundle
"----------------------------------------------------
""filetype off                   " required!
""set rtp+=~/.vim/bundle/vundle/
""call vundle#rc()
""
""Bundle 'leafgarland/typescript-vim'
""Bundle 'kchmck/vim-coffee-script'
""filetype plugin indent on

"----------------------------------------------------
"neobundle setting
"https://github.com/Shougo/neobundle.vim
" :NeoBundleInstall
"----------------------------------------------------
filetype plugin indent off
if has('vim_starting')
  " 初回起動時のみruntimepathにNeoBundleのパスを指定する
  set runtimepath+=~/.vim/bundle/neobundle.vim/

  " NeoBundleが未インストールであればgit cloneする・
  if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
    echo "install NeoBundle..."
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
  endif
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundle 'Shougo/neobundle.vim'
" コードの自動補完
"NeoBundle 'Shougo/neocomplete.vim'
""NeoBundle 'Shougo/neocomplcache.vim'
" スニペットの補完機能
""NeoBundle "Shougo/neosnippet"
" スニペット集
""NeoBundle 'Shougo/neosnippet-snippets'
" インデントの可視化
" 線でインデントを可視化
NeoBundle 'Yggdroot/indentLine'
" 色でインデントを可視化
"NeoBundle 'nathanaelkane/vim-indent-guides'
" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'
" Ruby向けにendを自動挿入してくれる
NeoBundle 'tpope/vim-endwise'
call neobundle#end()

filetype indent plugin on
NeoBundleCheck

if neobundle#is_installed('neocomplcache.vim')
  " Vim起動時にneocompleteを有効にする
  let g:neocomplcache_enable_at_startup = 1
  " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
  let g:neocomplcache_enable_smart_case = 1
  " 3文字以上の単語に対して補完を有効にする
  let g:neocomplcache_min_keyword_length = 3
  " 区切り文字まで補完する
  let g:neocomplcache_enable_auto_delimiter = 1
  " 1文字目の入力から補完のポップアップを表示
  let g:neocomplcache_auto_completion_start_length = 1
  " バックスペースで補完のポップアップを閉じる
  inoremap <expr><BS> neocomplcache#smart_close_popup()."<C-h>"
  inoremap <expr><S-TAB> pumvisible() ? "\<Down>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"

  " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
  " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
  imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
endif

if neobundle#is_installed('vim-fugitive')
  "grep検索の実行後にQuickFix Listを表示する
  autocmd QuickFixCmdPost *grep* cwindow
  " ステータス行に現在のgitブランチを表示する
  ""set statusline+=%{fugitive#statusline()}
endif

if neobundle#is_installed('vim-indent-guides')
  " vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_guide_size = 1
  let g:indent_guides_start_level = 2
endif
